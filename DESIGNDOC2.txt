                     +--------------------------+
       	       	     |		ECE 434		|
		     | PROJECT 2: USER PROGRAMS	|
		     | 	   DESIGN DOCUMENT     	|
		     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Vineet Sepaha vs381@scarletmail.rutgers.edu
Kevin Wu kw346@scarletmail.rutgers.edu
Prit Modi pmm176@scarletmail.ruters.edu


---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

		    ---Work Division----

Vineet Sepaha:
- Process Termination Messages (50%)
- Argument Passing
- System calls: read(), write(), seek(), tell()
- Allowing/Denying writes to executables

Kevin Wu:
- Process Termination Messages (50%)
- System calls: create(), remove(), open(), filesize(), (close, exit)
- syscall_handler()
- Worked on merging the system calls into syscall.c
and fixed errors received from doing so.

Prit Modi:
- System calls: halt(), exec(), wait() (exit, close)
- Synchronization between parent and child

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

- http://www.scs.stanford.edu/10wi-cs140/labs/10wi-proj2.pdf
- http://courses.cs.vt.edu/~cs3204/fall2009/pintos-vt-local/Project2Session.pdf

			   ARGUMENT PASSING
			   ================
(Vineet - Done)
---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

In process.c:
    static void get_args(char * cmd_string, char* argv[], int *argc)
/* The purpose of this function was to implement string parsing */



---- ALGORITHMS ---- (Done)

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?

    One of the most important things to do for argument passing was to setup 
the stack. We implemented the stack in setup_stack().
    In our implementation, we first start out with process_execute() which is used
for calling start_process(). This function is then used to call the load() function.
The load() function is responsible for implementing parsing to the command line 
string which it is passed. The load function calls a function which we created called
get_args(); this function is used to parse the string and use strtok_r() to get each 
of the arguments, save them as tokens and place them in the variable we created called 
argv[] and also place the number of arguments into a variable called argc. In the get_args()
function we read the arguments left to right into argv[] (However, when we later pushed them
onto the stack, they were pushed in from right to left). After get_args() was implemented,
we return to the load() function and call setup_stack().
    As previously mentioned, this is where we pushed the arguments onto the stack. The 
first thing we did was allocate memory for the stack by using realloc(). Next, we pushed the
arguments in the reverse orderon to the stack. After this is done we implement a word align 
to optimize the stack. Then we pushed in a sentinel value of zero onto the stack so
the kernel would know when we were done pushing in the arguments. After this was done,
we started to decrement the stack pointer by 4 and push on the addresses for each of the
arguments onto the stack.The last two things we pushed onto the stack was a pointer to where
the address was stored for the first argument and then we pushed on a value of zero onto
the stack to show that we were finished with setting up the stack. 

---- RATIONALE ---- (Done)

>> A3: Why does Pintos implement strtok_r() but not strtok()?

    Pintos implements strtok_r() instead of strtok() because strtok() skips over the first 
argument in while parsing the string. The strtok_r() function however, returns a pointer
to the first arguments(token). When there are no more tokens remaining, it returns a null pointer.
This is what we needed in order for argument passing to work successfully.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

    One of the advantages of the Unix approach is that less time is spent in the 
kernel. The advantage of this is that it is every expensive to run in kernel mode 
and if a problem occurs while in kernel mode, the entire PC will halt.
    The second advantage of the Unix approach is that it is much safer to use 
shell parsing operations. This is because the shell would be able to check for  
an unsafe command line before it goes to the kernel. This will prevent errors
from occuring in the kernel.

			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----
(We each work on what we added/changed)

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

 The following were added in syscall.c

//Global Variables
#define MAX_FILE_SIZE 204800
//Maximum size of file

#define MAX_FILE_NAME_LENGTH 64
//Maximum length of file name

#define MAX_ARGS 10
//Maximum number of args allowed

struct file* file_check (int fd)
{
  struct thread *cur = thread_current();
  struct list_elem *e =  list_head (&cur->file_list);

  while ((e = list_next (e)) != list_end (&cur->file_list)){
    struct process_file *pf = list_entry (e, struct process_file, elem);
    if (fd == pf->fd) {
	  return pf->file;
	}
    e = list_next(e);
  }

  return NULL;
}
/* The struct is used to be able to reference the file that is going to be 
used. */
 
static struct lock LOCK; 
/* LOCK is implemented to prevent interrupts during the critical section of a system call */

typedef int pid_t;
/* To define certain parameters as threads */

struct process_file
{
	struct file *file;
	int fd;
	struct list_elem elem;
};
// Declared in order for the implemented functions process_file_add() and process_file_get() to work

struct file* process_file_get(int fd);
// Used in order to push in the file process


The following were added in thread.h within thread struct:
struct thread{
...

struct file *exec
// File with the thread executable

struct list file_list;
// List used to keep all the files

...
}


>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

---- ALGORITHMS ----

(Vineet - Done)
>> B3: Describe your code for reading and writing user data from the
>> kernel.

Read:
	When read is called the first thing is to check to see if the address is valid.
The next thing we do is aquire the lock since it is going to be reading from the file.
Then we check to see if the file descriptor (fd) is equal to STDIN_FILENO. If it is 
not equal, we set the return value to -1, release the lock and then return the return value. 
If it is equal, then we iterate through and read each input. When this is successful, 
we assign the return value to the size parameter, release the lock and then return.

Write:
	When write is called, the first thing we do is check to see if the address is valid.
The next thing we do is aquire the lock since it is going to be writing. Then we check to
see if the file descriptor (fd) is equal to STDOUT_FILENO. If it is not equal then we and
the file_check did not work, then we set the return value to -1, release the lock and return
the return value. If it is not equal and the file_check did work, then make the return value
equal to file_write(file, buffer, size), release the lock and return the return value.
If the file descriptor is equal to STDOUT_FILENO then we use putbuf() to print the content of
the buffer to the console.

(Kevin - Done)
>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

    Within our implementation, the maximum size of a page is exactly
4,096 bytes. Thus, if a system call that creates a full page and
is copied there would be in total 2 full pages. As such, the maximum 
possible number of inspections would be 2. The least possible number 
of inspections would be 1. 

    In the use case of a system call only copying 2 bytes of data,
it is the same as previous, with maximum possible inspections
being 2 and minimum possible inspections at 1. The only slight
difference is that the possibility of needing 2 inspections
is much lower than the previous use case.

    A possible way to improve upon these numbers is to simply
remove checking the addresses for read and write. If this
is the case, the system calls would continue untill an
error, like page fault, occurs. In such an instance, 
the interrupt handler would be implemented in such a manner
that is would handle these errors appropriately. As such,
there wouldn't be a need for any inspections. 


(Prit - Done)
>> B5: Briefly describe your implementation of the "wait" system call.

Basically our implementation of wait call keeps going through list of children in a loop looking for one of them to be dead. If it's dead, it cleans up the dead struct and returns the status if it exists. THen when it exits it replaces itself on it's parent's list of children with it's dead body. And then synchronization is achieved with a single lock per list of children.

(Kevin - Done)
>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

    Within our implementation, our primary method of dealing with
bad pointers is by using the function we created, validaddr().
Before any of the system calls can even begin, we check the
address of the pointer and makes sure it is valid before we
proceed. As such, we essentially prevent bad pointers from
ever having any interaction with our system calls. Thus,
there is no obscurity towards the primary function of code and
no temporarily allocated resources are used.

Example:
	
	system call exec is made

	The syscall handler passes in the arguments respectively.
	The function exec is called upon with the passed 
	arguments. Before any execution of code is performed,
	the function validaddr() is executed to check for valid
	pointer address. If it is a bad pointer, thread_exit() is
	called. If it isn't a bad pointer, the function continues 
	normally.

---- SYNCHRONIZATION ----

(Prit - Done)
>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?

If we were to do this using the child parent relationship method, we would have the parent record the child load status. Child can have access to the parent thread via a new parent id. By doing so, child thread can exit anytime and only one variable inside parent thread is enough. We can also implement a check system so when children load success/faulure, the child can have access to parent thread using the parent id and system sets the value. So before the parent creates the child thread, the parent will set the load status to 0 which is basically initializing. Then paret waits for load status to change in order to get access to the check system.

(Prit - Done)
>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

If we had more time we would implemented a simple lock on the list of children which can deal with almost all of the situations above. Lets call process "P" and child "C" so it is easier to understand.

First if P calls wait(C) before C exits, P notices that C is still alive and spins. When C does ultimately exit, then it goes into the next case:

If P calls wait(C) after C exits, P finds C and releases it.

Our implementation would make sure that resources are realesed in an efficient manner. For ex, a thread is responsible for cleaning up its own struct. But a dead thread struct is always the parent's responsibility. Thus the parent just needs to make sure that a dead thread object is not created by a child after it's done cleaning up all of its dead children in preparation of it's own death. In order to do so, we would have to set the pointer of child's parent to null and children_lock would ensure its actually safe. However there is a key thing we cannot forget to implement that is children have to check that their parent pointer is not null both before and after getting parent's children lock.


---- RATIONALE ---- 

(Kevin - Done)
>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

Within our implementation, the main way to access user memory was 
through our implemented function validaddr(). Before any type
of memory access is allowed, validaddr() checkes the virtual 
address and determines if it is larger than the built in 
PHYS_BASE; if this is the case, the function returns false 
and will immediately call thread_exit(). If the function
returns true, then the system calls proceed accordingly..

The primary reasoning behind choosing such a method of accessing
memory was the concept of prevention before error occurs. 
In other words, we valued stopping an error before it can even
happen rather than fixing an error that results from unknown 
circumstances. In this manner, there is no waste of valuable
resources as the prevention method denies access to the rest 
of the execution. In the situation where an error is detected
when it occurs, computer resources are already being used
and must be reallocated and freed; this is a tedious job and 
avoiding such an issue was our main concern.

(Vineet - Done)
>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

Advantages:
  1) We are using the file descriptors to see which syscall is being called
between read and write. The file descriptor helps us to check and see if it
is valid for the function it is being used with.
  2) Another advantage is that the struct thread space is less.
Disadvantage:
  1) One problem is that it consumes the the kernel space, if the user 
program was to open a lot of file this would lead to a problem in the 
kernel causing it to crash and halt the entire PC.
 
 
			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

  In our opinion this assignment was very difficult and it took a very long
time to finish the amount that we were able to finish.

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?


>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?


Not enough guidance to mislead.

>> Any other comments?
A dedicated lecture/office hour that teaches us the requirements and overall tasks needed would be greatly appreciated.