+--------------------+
			|       ECE 434      |
			| PROJECT 1: THREADS |
			|   DESIGN DOCUMENT  |
			+--------------------+
				   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Vineeth Sepaha <netid@scarletmail.rutgers.edu>
Kevin Wu <netid@scarletmail.rutgers.edu>
Prit Modi <pmm176@scarletmail.rutgers.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.


			     ALARM CLOCK
			     ===========


---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.


***

static struct list wait_list;


***

static int64_t ticks;

***

timer_sleep (int64_t ticks) 
{
  int64_t start = timer_ticks ();
  ASSERT (intr_get_level () == INTR_ON);

  enum intr_level old_level = intr_disable();
 
  struct thread* t = thread_current(); 
  t -> wake_tick = start + ticks;
  list_insert_ordered(&wait_list, & t->sleep_elem, least_sleep, NULL);
 
  thread_block(); 
  intr_set_level(old_level);
}

***

timer_interrupt (struct intr_frame *args UNUSED)
{
  ticks++;
  thread_tick ();

  if(list_empty(&wait_list)) 
    return;

  struct list_elem *a = list_front(&wait_list);
  struct thread *pThread = list_entry(a, struct thread, sleep_elem);

  struct list_elem *e = list_head (&wait_list);
  int max_priority = 0;
  while ((e = list_next (e)) != list_end (&wait_list)) {
    struct thread *pThread = list_entry(e, struct thread, sleep_elem);
    if(pThread->wake_tick <= ticks) {
	list_pop_front(&wait_list);
        thread_unblock(pThread);
	e = list_head (&wait_list);
    } else
	break;
  }
}

***

struct thread
  {
    /* Owned by thread.c. */
    tid_t tid;                          /* Thread identifier. */
    enum thread_status status;          /* Thread state. */
    char name[16];                      /* Name (for debugging purposes). */
    uint8_t *stack;                     /* Saved stack pointer. */
    int priority;                       /* Priority. */
    struct list_elem allelem;           /* List element for all threads list. */
    int64_t wake_tick;			/* Indicates when thread will wake up. */

    /* Shared between thread.c and synch.c. */
    struct list_elem elem;              /* List element. */

    /* Used to keep threads in sleep list */
    struct list_elem sleep_elem;              /* List element. */

#ifdef USERPROG
    /* Owned by userprog/process.c. */
    uint32_t *pagedir;                  /* Page directory. */
#endif

    /* Owned by thread.c. */
    unsigned magic;                     /* Detects stack overflow. */
  };


***************************************************************************

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.






***************************************************************************



---- SYNCHRONIZATION ----

>> A3: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?





***************************************************************************


---- RATIONALE ----

>> A4: Why did you choose this design?  In what ways is it superior to
>> another design you considered?





***************************************************************************

			 PRIORITY SCHEDULING
			 ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

***************************************************************************

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?


***************************************************************************


---- SYNCHRONIZATION ----

>> B5: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.


***************************************************************************

---- RATIONALE ----

>> B6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

***************************************************************************

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?
>> Any other comments?


***************************************************************************