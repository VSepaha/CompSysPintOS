       	       	    +---------------------------+
		    |		CS 140		|
		    | PROJECT 3: VIRTUAL MEMORY	|
		    |	   DESIGN DOCUMENT	|
		    +---------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Vineet Sepaha <vs381@scarletmail.rutgers.edu>
Kevin Wu <kw346@scarletmail.rutgers.edu>
Prit Modi <pmm176@scraletmail.rutgers.edu>

>> Fill in the contribution of each member.

In the vm folder:
- Prit: swap.c and swap.h
- Kevin: page.c and page.h
- Vineet: frame.c and frame.h


---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

Resources
- http://courses.cs.vt.edu/~cs3204/fall2009/pintos-vt-local/Project3Session.pdf
- http://csl.skku.edu/uploads/CSE3008F09/project3.pdf

			PAGE TABLE MANAGEMENT
			=====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.




---- ALGORITHMS ----

=======

DONE
>> A2: In a few paragraphs, describe your code for locating the frame,
>> if any, that contains the data of a given page.

	One instance in which we would need to locate the frame is when
	a page fault occurs. This is because at this point the OS needs to 
	search the physical memory (since it isn't located in virtual memory).

	The first step would be to find the supplemental page table entry via
	using the virtual address. The virtual address will be rounded down
	to its respective page in memory. It will then be hashed to find
	the correct supplemental page table entry.

	Next, a frame is needed for the corresponding supplemental page table
	entry. Our code will then check if the a new frame is available; if there
	isn't a frame free at the time, a frame will be evicted to make room.

	Afterwards, the virtual address is mapped to the physical memory of the
	frame address.

	Depending on where the virtual address is located, different actions
	are taken accordingly. If the virtual address is from a file or a map,
	then the data is read in. If the virtual address is from swap, the data
	is read in for the swapping parition.

	As such, the boolean variable "is_loaded" within the supplemental
	page table struct is then set to "true" in order to indicate that
	it is indeed loaded.

DONE
>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?

For our implementation, the accesses to the user stack is done through
the user virtual addresses in the kernel. The user pointers in syscall.c
and exception.c provdie user accesses. From the user addess we are able to 
find the spte and, if necessary, the page is loaded in. Because of this 
implementation, only the user virtual address indicated in the spt can
use the kernel virtual memory address.


---- SYNCHRONIZATION ----
DONE
>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?

When two or more processes need a new frame, they call the function
frame_alloc(). Of course, this would causerace conditions. In order to 
avoid these race conditions, we used a frame table lock which isimplemented 
whenever a frame is added or evicted.

---- RATIONALE ----
DONE
>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?

A) Within frame_tbl_ent there is a variable called "spte". spte is an 
abbreviation for supplemental page table entry. This is used whenever 
we are locating a valid virtual address and whenever we need to evict 
a corresponding frame.

B) Within frame_tbl_ent there is a struct "thread". The thread's 
purpose is to use it to make a comparison with other threads. 
This helps ensure synchronization.

C) Within suppl_page_tbl_ent there is a boolean variable named "pinned".
 This value is true whenever the kernel is acquiring data in the supplemental 
 page table entry. This is to ensure that whenever a thread is currently 
 accessing the frame it will not be evicted. This is necessary in order to 
 prevent errors duing the critical sections and stopping the kernel from crashing.

D) Within suppl_page_tbl_ent there is a void pointer called "unused_virtual_address". 
As in the previous project, this is used so the kernel only accesses 
unassociated data within the virtual memory. As such, there is no need to 
worry about alias problems with access and dirty bits.

E) Within suppl_page_tbl_ent there is a boolean variable named "is_loaded". 
As stated previously, the purpose of this variable is to indicate if the 
supplemental page table entry is already in memory. This is crucial to prevent 
page faults when syscalls are made referring to the page.



		       PAGING TO AND FROM DISK
		       =======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----
DONE
>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.

We have created a frame eviction policy to perform this.
We start off by iterating through the frame table, ignoring the entries
which are being used by the kernel. If the frame's access bit is set to
true, we set it to false. Otherwise, since the access bit is false, it 
will be swapped out. If the page has the dirty bit set or is a stack page,
we write to the its file or we swap it out to the disk. The swap map scans
for free sectors when swapping out to the disk. If it cannot find any free
sectors, it panics. If there is one available, it writes into the the 
corresponding sector and sets the page's swap index. Next we set the page's
is_loaded flag to false and we deallocate the memory (remove the frame from
the table and free the memory). Lastly, we return palloc_get_page(flags).

DONE
>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?

During our frame eviction policy, the current frame is freed and a new
frame is allocated so there no reference to the removed frame. For this
new frame, we set the thread to the current thread and we set the spte
to the current thread of the spte the frame is being used for. The only
problem is that since we are deallocation and reallocating memory, it
is inefficient.

VINEET
>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.

---- SYNCHRONIZATION ---- KEVIN

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)

Our implementation is based around the boolean variable "pinned". 
As previously stated, the pinned boolean variable is responsible for 
telling the kernel whether or not a particular virtual address is being 
accessed/been used. With that in mind, when the kernel uses the supplmental 
page table entry when a page fault occurs or through a syscall, the 
supplemental page table entry's pinned variable is checked. If the variable 
is set to true, then our frame eviction policy ignores it and won't disturb 
it during its critical section. On the other hand, if the pinned variable is 
set to false it gets evicted promptly (unless they pay the rent!). In the 
instance where the pinned variable is set to true, after the kernel is done 
accessing the data required, it is reverted to false. Since our system avoids 
entering anothers critical section, we essentially avoid deadlocks presented 
by waiting for a section to complete.

>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?

As was stated previously, and for numerous times, our implementation 
revolves around the boolean variable "pinned". Depending on the value 
of "pinned" different corresponding actions are taken. Let's assume that 
process Q has been accessed; Q's pinned variable is therefore set to true.
When it is process P's turn to check the supplemental page table, it will 
ignore Q until Q is finished; when Q is finished the pinned variable will 
be set to false. 

In regards to the scenario where a race condition between P evicting 
Q's frame and Q faulting the page back in, this is prevented through 
the usage of page faults. In such a particular situation, Q's kernel 
thread will page fault and will go to the supplemental page table entry 
and reloads the frame.

>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?

Once again, we ensure this type of behavior doesn't occur through the 
usage of the boolean variable "pinned". While any process is being accessed, 
the pinned variable is set to true. Whenever this variable is set to true, 
no operations may occur to interrupt its critical section.

There is a situation where there is a slight miscommunication. That 
instance is when process Q is attempting to evict a frame while at the 
same time process P is trying to pin it. At such an occurance, Q will 
simply page fault and reloads the memory.

>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?

During system calls, the kernel will manually load in the pages that 
have not been loaded in based on the boolean variable pinned. This is 
to ensure that we do not evict frames that are currently being accessed. 
Page fault is also heavily used within the kernel to fault pages when it 
is needed.

Accesess to invalid virtual addresses are dealt with in a simple manner: 
kill the process. As such, when the process is killed, all the pages associated 
with it are evicted in order to free memory space.


---- RATIONALE ----
VINEET
>> B9: A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.

			 MEMORY MAPPED FILES
			 ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

So when it comes to Memory Mapped files we used the similar concept that was 
used for executable files. They are basically lazy loaded and acts like any
executable file would. They are first read from the file and then loaded
into physical memory accordingly. One of the differences between executable
files and memory mapped files is that they must be written back to the
original corresponding file, not to swap, when eviction and mumap are
occuring. While in munmap, the thread has to iterate through it's
corresponding Memory Map list, write dirty pages on the disk and then close
Memory Map file after the clean up. So during process exit, all of the
Memory Mapped files are munmapped and all of the other pages are trashed.

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.

When determining whether a new file mapping overlaps any existing you have
to check several things. The file is mapped page by page to it's address and 
for each page it's spte is added onto the thread's hast table. Now, if the
hash table finds out that there are duplicate entries, that means that the
new file overlaps with an existing statement. And thus all the previos
mappings based on the new files are unmapped.

---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.

The implementation does share some of the code for both situations because 
like mentioned above both executable files and memory mapped files are
loaded in the same way. They both make use of the load file function when
their pages are in the process of being loaded into physical memory.
Furthermore, in fram evication, memory mapped dirty pages are just written
to their corresponding files where as the clean memoery mapped dirty pages
are not written. So this makes it a bit easier when it comes to implementing
memory mapped files since it's essentially an extension of the executables
class. 

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
